{"version":3,"sources":["three-globe.ts","scene.ts","common.ts","country-densities.ts","types.ts","country-features.ts","data-points.ts","chart.ts","ui-overlay.tsx","data-source-csse.ts","data-source-bing.ts","data-source-google.ts","data-sources.ts","geojson-utility.ts","app.tsx","vertex-shader.glsl","fragment-shader.glsl","serviceWorker.ts","index.tsx"],"names":["polar2Cartesian","lat","lng","relAltitude","phi","Math","PI","theta","r","x","sin","cos","y","z","createLatLngClickHandler","renderer","globe","camera","onClick","element","domElement","raycaster","THREE","mouse","startEvent","clientX","clientY","getEventPos","d3","changedTouches","onClickGlobe","eventPos","sqrt","pow","getBoundingClientRect","width","height","setFromCamera","intersects","intersectObjects","length","latlng","acos","atan2","altitude","cartesian2Polar","point","sel","setStartEvent","on","responseToJson","response","a","json","processCountryDensities","countryDensities","forEach","countryDensity","sum","densities","values","d","idx","getCountryDensities","res","fetch","Promise","allSettled","map","cd","push","isAdminEqual","left","right","i","max","DenseCovidStatisticsDataForRegion","admin","this","s","SparseCovidStatisticsDataForRegion","days","data","dataIdx","binarySearch","needle","entries","b","at","bt","l","range","getValueRange","Array","fill","_","getValue","getFeatureAdmin","feature","props","properties","admi0","admi1","getFeatures","paths","promises","p","fc","undefined","rewind","preprocess","features","getDecimation","decimation","isMobile","margin","calcRate","array","next","rate","Number","isFinite","handleChange","f","v","UiOverlay","paused","setPaused","dataSource","setDataSource","globals","forceUpdate","useForceUpdate","useGlobal","propName","useState","helpExpanded","setHelpExpanded","parametersExpanded","setParametersExpanded","sourcesExpanded","setSourcesExpanded","dependenciesExpanded","setDependenciesExpanded","licenses","setLicenses","shownLicense","setShownLicense","extinction","POSITIVE_INFINITY","extinctionEnabled","setExtinctionEnabled","min","setExtinction","keepDeaths","setKeepDeaths","useRecoveryData","setUseRecoveryData","expanded","useEffect","li","className","Fade","in","IconButton","aria-label","Grow","unmountOnExit","Card","CardContent","Typography","variant","component","FormGroup","row","FormControl","fullWidth","InputLabel","id","Select","labelId","value","onChange","event","target","MenuItem","FormControlLabel","control","Checkbox","checked","label","Grid","container","spacing","item","xs","Slider","aria-labelledby","valueLabelDisplay","disabled","CardActions","Button","size","paragraph","Link","href","style","color","Collapse","timeout","Object","keys","name","key","repository","licenseText","license","Backdrop","open","TextField","multiline","InputProps","readOnly","getConsistentAdmin","processCsseCovidData","path","parseDate","findStartDateIdx","findIndex","k","c","assert","create","t","j","splice","columns","dates","dateStartIdx","date","processStatistics","requests","countriesGeoJson","funcs","Map","func","has","set","get","datas","finalized","startDate","worldwideValues","region","reduce","accumulator","currentValue","callbacks","sharedDates","parseSharedDate","str","dn","valueOf","sd","genAdminKey","join","adminKey","confirmed","recovered","deaths","from","sort","dateToIndex","regionData","makeContiguous","cdata","last","val","genStats","setStatsConfirmed","setStatsRecovered","setStatsDeaths","geographyUri","epidemiologyUri","DateCache","cache","AdminCache","caches","uris","all","uri","match","expires","headers","Date","add","text","geographyCsv","epidemiologyCsv","ac","googleKeyToAdmin","gc","dc","tested","datesWithData","lastDate","setDate","getDate","leftIndex","day","lastDay","worldwide","admin0data","filter","getCovidData","generateCsseRequests","generateBingRequests","generateGoogleRequests","generateCoordinates","geoJsonGeometry","radius","vertices","indices","type","coordinates","linearRing","prev","startIdx","coordinate","LatLng","addpt","cart","distanceTo","overscale","ceil","origprev","endIdx","generateLinesFromFeatureGeometry","material","bufferGeometry","g","vertexData","Float32Array","attribute","setAttribute","setIndex","lines","generateLinesFromFeatureCollection","admin1GeoJson","geometries","featureCollection","geometry","App","rootElement","useRef","scene","setScene","setGlobe","setRenderer","setCamera","admin0GeoJson","setAdmin0GeoJson","setAdmin1GeoJson","statsConfirmed","statsRecovered","statsDeaths","setCountryDensities","selectedRegion","setSelectedRegion","admin0Lines","setAdmin0Lines","admin1Lines","setAdmin1Lines","dispatcher","_time","_paused","_intervalId","call","time","clearInterval","lastTime","setInterval","now","secondsElapsed","current","obj","ThreeGlobe","animateIn","globeImageUrl","bumpImageUrl","globeMaterial","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","showAtmosphere","appendChild","position","cameraControls","OrbitControls","minDistance","rotateSpeed","zoomSpeed","ResizeObserver","setSize","aspect","updateProjectionMatrix","observe","animate","update","render","requestAnimationFrame","initScene","geopt","visible","find","countryName","stateName","selectedRegionLines","remove","country","indexOf","then","getAdmin0Features","getAdmin1Features","onBeforeRender","selectAll","exit","svg","enter","append","attr","dataConfirmed","dataDeaths","countryFilter","some","confirmedRate","deathsRate","node","domain","rescaled","yConfirmed","nice","yDeaths","yRate","xAxisD3","tickSizeOuter","yConfirmedAxisD3","yDeathsAxisD3","yConfirmedAxis","yDeathsAxis","confirmedLine","defined","isNaN","deathsLine","rateLine","defs","confirmedSeries","deathsSeries","confirmedRateSeries","deathsRateSeries","createLine","datum","line","chartOverlay","currentTimeDrag","currentTime","updateTimeIndicator","xp","xAxis","getClientPointDate","evt","cp","invert","classed","dragState","currentTimeDragd3","d3zoom","previousSize","zoom","extent","zoomed","transform","rescaleX","scale","select","zooming","scaleExtent","generateChart","geoJsons","mesh","points","countries","featureAdmin","statMatch","geoBounds","density","admin_1","countriesWithSubs","genPoint","random","lats","lngs","u","startPoint","getNewCases","newCasesObj","num","newCases","remainder","floor","statsConfirmedCasesObj","statsRecoveredCasesObj","statsDeadCasesObj","recoveredTime","pointsChanged","dead","startPointUpdate","pt","deadTime","spread","xyz","flat","times","recoveredTimes","deadTimes","uniforms","vertexShader","fragmentShader","blending","blendEquation","blendSrc","blendSrcAlpha","blendDst","transparent","depthWrite","extinction_time","keep_deaths","use_recovery_data","generateDatapoints","theme","React","useMemo","createMuiTheme","palette","primary","main","ThemeProvider","ref","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3925ecf.chunk.js","sourcesContent":["// the following functions are adapted from three-globe, because it doesn't export it\nimport { LatLng } from \"leaflet\";\n\nexport const GLOBE_RADIUS = 100;\n\nfunction polar2Cartesian({ lat, lng }: LatLng, relAltitude = 0) {\n  const phi = ((90 - lat) * Math.PI) / 180;\n  const theta = ((90 - lng) * Math.PI) / 180;\n  const r = GLOBE_RADIUS * (1 + relAltitude);\n  return {\n    x: r * Math.sin(phi) * Math.cos(theta),\n    y: r * Math.cos(phi),\n    z: r * Math.sin(phi) * Math.sin(theta),\n  };\n}\n\ntype LatLngAlt = { lat: number; lng: number; altitude: number };\n\nfunction cartesian2Polar({ x, y, z }: { x: number; y: number; z: number }): LatLngAlt {\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const phi = Math.acos(y / r);\n  const theta = Math.atan2(z, x);\n\n  return {\n    lat: 90 - (phi * 180) / Math.PI,\n    lng: 90 - (theta * 180) / Math.PI - (theta < -Math.PI / 2 ? 360 : 0), // keep within [-180, 180] boundaries\n    altitude: r / GLOBE_RADIUS - 1,\n  };\n}\n\nexport { polar2Cartesian, cartesian2Polar };\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport ThreeGlobe from \"three-globe\";\nimport * as d3 from \"d3\";\nimport { cartesian2Polar } from \"./three-globe\";\n\nexport const initScene = (element: HTMLDivElement) => {\n  const globe = new ThreeGlobe({ animateIn: false })\n    .globeImageUrl(\"./BATH_50M_2.png\")\n    .bumpImageUrl(\"//unpkg.com/three-globe/example/img/earth-topology.png\");\n\n  globe.globeMaterial().polygonOffset = true;\n  globe.globeMaterial().polygonOffsetFactor = 1;\n  globe.globeMaterial().polygonOffsetUnits = 1;\n\n  globe.showAtmosphere(true);\n\n  const renderer = new THREE.WebGLRenderer();\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera();\n\n  element.appendChild(renderer.domElement);\n\n  scene.add(new THREE.AmbientLight(0xbbbbbb));\n  scene.add(new THREE.DirectionalLight(0xffffff, 0.6));\n  scene.add(globe);\n\n  camera.position.x = 200;\n  camera.position.y = 200;\n\n  const cameraControls = new OrbitControls(camera, renderer.domElement);\n\n  cameraControls.minDistance = 101;\n  cameraControls.rotateSpeed = 0.5;\n  cameraControls.zoomSpeed = 1.6;\n\n  // Handle resize\n  const updateSize = () => {\n    const { width, height } = element.getBoundingClientRect();\n\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  };\n\n  const resizeObserver = new ResizeObserver(updateSize);\n\n  resizeObserver.observe(element);\n\n  (function animate() {\n    cameraControls.update();\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n  })();\n\n  return { renderer, scene, camera, globe };\n};\n\nexport function createLatLngClickHandler({\n  renderer,\n  globe,\n  camera,\n  onClick,\n}: {\n  renderer: THREE.WebGLRenderer;\n  globe: ThreeGlobe;\n  camera: THREE.PerspectiveCamera;\n  onClick: Function;\n}) {\n  const element = renderer.domElement;\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let startEvent: { clientX: number; clientY: number } = { clientX: 0, clientY: 0 };\n\n  const getEventPos = () => {\n    return {\n      clientX: d3.event.clientX ?? d3.event.changedTouches[0].clientX,\n      clientY: d3.event.clientY ?? d3.event.changedTouches[0].clientY,\n    };\n  };\n\n  const onClickGlobe = () => {\n    const eventPos = getEventPos();\n\n    const delta = Math.sqrt(Math.pow(startEvent.clientX - eventPos.clientX, 2) + Math.pow(startEvent.clientY - eventPos.clientY, 2));\n\n    if (delta > 5) return; // drag, not click\n\n    const { width, height } = element.getBoundingClientRect();\n\n    mouse.x = (eventPos.clientX / width) * 2 - 1;\n    mouse.y = -(eventPos.clientY / height) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n\n    var intersects = raycaster.intersectObjects([globe], true);\n\n    if (intersects.length > 0) {\n      const latlng = cartesian2Polar(intersects[0].point);\n\n      onClick(latlng);\n    } else onClick();\n  };\n\n  const sel = d3.select(element);\n\n  const setStartEvent = () => {\n    startEvent = getEventPos();\n  };\n\n  sel.on(\"mousedown\", setStartEvent);\n  sel.on(\"click\", onClickGlobe);\n  sel.on(\"touchstart\", setStartEvent);\n  sel.on(\"touchend\", onClickGlobe);\n}\n","export const responseToJson = async (response: Promise<Response>) => await (await response).json();\n","import Leaflet from 'leaflet';\nimport { responseToJson } from './common';\n\nexport type Densities = { lats: number[]; lngs: number[]; values: number[] };\nexport type CountryDensities = { densities: Densities; admin: string; admin_1: string };\n\nexport function getDensityAdmin(cd: CountryDensities) {\n  return [cd.admin, cd.admin_1];\n}\n\nfunction processCountryDensities(json: object) {\n  const countryDensities = json as CountryDensities[];\n\n  countryDensities.forEach((countryDensity) => {\n    let sum = 0;\n\n    // normalize densities per administrative region\n    countryDensity.densities.values.forEach((d) => {\n      sum += d;\n    });\n\n    countryDensity.densities.values.forEach((d, idx) => {\n      countryDensity.densities.values[idx] /= sum;\n    });\n\n    // make cumulative\n    sum = 0;\n\n    countryDensity.densities.values.forEach((d, idx) => {\n      countryDensity.densities.values[idx] += sum;\n      sum = countryDensity.densities.values[idx];\n    });\n  });\n\n  return countryDensities;\n}\n\nexport const getCountryDensities = async () => {\n  const res = [fetch('./admin-0-density.json'), fetch('./admin-1-density.json')];\n\n  const countryDensities: CountryDensities[] = [];\n\n  await Promise.allSettled(\n    res.map(async (r) => {\n      const cd = processCountryDensities(await responseToJson(r));\n\n      countryDensities.push(...cd);\n    })\n  );\n\n  return countryDensities;\n};\n","import binarySearch from 'binary-search';\n\nexport type Admin = (string | undefined)[];\n\nexport interface CovidStatisticsDataForRegion {\n  admin: Admin;\n  readonly values: number[];\n  getValue(idx: number, interpolate?: boolean): number;\n  getValueRange(): [number, number];\n}\n\nexport type CovidStatisticsData = CovidStatisticsDataForRegion[];\n\nexport type CovidStatistics = {\n  data: CovidStatisticsData;\n  dates: Date[];\n};\n\nexport type GlobalsType = {\n  dispatcher: d3.Dispatch<object>;\n  time: number;\n  date?: Date;\n  startDate?: Date;\n  selectedRegionLines?: THREE.LineSegments;\n  paused: boolean;\n  extinction: number;\n  useRecoveryData: boolean;\n  keepDeaths: boolean;\n};\n\nexport function isAdminEqual(left: Admin, right: Admin) {\n  for (let i = 0; i < Math.max(left.length, right.length); ++i) {\n    if (left[i] !== right[i]) return false;\n  }\n\n  return true;\n}\n\nexport class DenseCovidStatisticsDataForRegion implements CovidStatisticsDataForRegion {\n  admin: Admin = [];\n  values: number[] = [];\n\n  getValueRange(): [number, number] {\n    return [0, this.values.length];\n  }\n\n  getValue(idx: number): number {\n    return this.values[idx];\n  }\n\n  static create(admin: Admin, values: number[]) {\n    const s = new DenseCovidStatisticsDataForRegion();\n\n    s.admin = admin;\n    s.values = values;\n\n    return s;\n  }\n}\n\nexport class SparseCovidStatisticsDataForRegion implements CovidStatisticsDataForRegion {\n  admin: Admin = [];\n  days: number[] = [];\n  data: number[] = [];\n\n  getValueRange(): [number, number] {\n    if (this.days.length <= 0) return [0, 0];\n\n    return [this.days[0], this.days[this.days.length - 1] + 1];\n  }\n\n  getValue(idx: number, interpolate = true): number {\n    let dataIdx = binarySearch(this.days, idx, (element: number, needle: number) => {\n      return element - needle;\n    });\n\n    if (dataIdx >= 0) {\n      // Exact match\n\n      return this.data[dataIdx];\n    }\n\n    if (dataIdx < 0) dataIdx = -dataIdx - 1;\n    if (dataIdx === 0) return 0; //this.data[0];\n    if (dataIdx === this.days.length) return this.data[this.data.length - 1];\n\n    const entries = [dataIdx - 1, dataIdx];\n    const [a, b] = entries.map((x) => this.data[x]);\n    const [at, bt] = entries.map((x) => this.days[x]);\n    const l = (idx - at) / (bt - at);\n\n    return a * (1 - l) + b * l;\n  }\n\n  get values() {\n    const range = this.getValueRange();\n\n    return new Array(range[1]).fill(0).map((_, idx) => this.getValue(idx));\n  }\n}\n","import { FeatureCollection, Feature } from 'geojson';\nimport { responseToJson } from './common';\n// @ts-ignore\nimport rewind from '@mapbox/geojson-rewind';\n\nexport const getFeatureAdmin = (feature?: Feature) => {\n  const props = feature?.properties as any;\n  const admi0 = props?.['ADMIN'] ?? props?.['admin'];\n  const admi1 = props?.['name_alt'];\n\n  if (props?.['featurecla'] === 'Admin-0 country') return [admi0];\n\n  return [admi0, admi1];\n};\n\nasync function getFeatures(paths: string[] | string): Promise<FeatureCollection | undefined> {\n  if (typeof paths === 'string') paths = [paths];\n\n  const promises = paths.map((p) => fetch(p));\n\n  let fc: FeatureCollection | undefined = undefined;\n\n  await Promise.allSettled(\n    promises.map(async (r) => {\n      const cd = (await responseToJson((r as any).fetch ?? r)) as FeatureCollection;\n\n      rewind(cd, true);\n\n      (r as any).preprocess?.(cd);\n\n      if (fc === undefined) fc = cd;\n      else fc.features.push(...cd.features);\n    })\n  );\n\n  return fc;\n}\n\nexport async function getAdmin0Features(): Promise<FeatureCollection | undefined> {\n  return getFeatures('./ne_110m_admin_0_countries.geojson');\n}\n\nexport async function getAdmin1Features(): Promise<FeatureCollection | undefined> {\n  return getFeatures('./ne_10m_admin_1_states_provinces.geojson');\n}\n","/* eslint import/no-webpack-loader-syntax: off */\n\nimport { LatLng } from 'leaflet';\nimport * as d3 from 'd3';\nimport binarySearch from 'binary-search';\nimport * as THREE from 'three';\nimport { isMobile } from 'mobile-device-detect';\nimport { CountryDensities, Densities, getDensityAdmin } from './country-densities';\nimport { FeatureCollection, Feature } from 'geojson';\nimport { CovidStatistics, CovidStatisticsDataForRegion, isAdminEqual } from './types';\n// @ts-ignore\nimport vertexShader from '!!raw-loader!./vertex-shader.glsl';\n// @ts-ignore\nimport fragmentShader from '!!raw-loader!./fragment-shader.glsl';\nimport { polar2Cartesian } from './three-globe';\nimport { getFeatureAdmin } from './country-features';\n\nexport const getDecimation = () => {\n  let decimation = 10; // FIXME: Should be handled dynamically\n\n  if (isMobile) {\n    decimation = 30;\n  }\n\n  return decimation;\n};\n\nexport const generateDatapoints = (\n  densities: CountryDensities[],\n  countriesGeoJson: FeatureCollection,\n  globals: any,\n  statsConfirmed: CovidStatistics,\n  statsRecovered: CovidStatistics,\n  statsDeaths: CovidStatistics\n) => {\n  let points: {\n    point: LatLng;\n    time: number;\n    recoveredTime?: number;\n    deadTime?: number;\n  }[] = [];\n\n  type GeoPt = [number, number];\n  type GeoBounds = [GeoPt, GeoPt];\n\n  let countries: {\n    geoBounds: GeoBounds;\n    feature: Feature;\n    densities?: Densities;\n    statsConfirmed?: number[];\n    statsRecovered?: number[];\n    statsDeaths?: number[];\n  }[] = countriesGeoJson.features.map((feature: Feature) => {\n    const featureAdmin = getFeatureAdmin(feature);\n\n    const statMatch = (sd: CovidStatisticsDataForRegion) => isAdminEqual(sd.admin, featureAdmin);\n\n    return {\n      geoBounds: d3.geoBounds(feature.geometry),\n      feature,\n      densities: densities.find((density) => isAdminEqual(getDensityAdmin(density), featureAdmin))?.densities,\n      statsConfirmed: statsConfirmed.data.find(statMatch)?.values,\n      statsRecovered: statsRecovered.data.find(statMatch)?.values,\n      statsDeaths: statsDeaths.data.find(statMatch)?.values,\n    };\n  });\n\n  countries = countries.filter((country) => country.statsConfirmed && country.densities && country.densities.values.length > 0);\n\n  const countriesWithSubs: any = {};\n\n  countries.forEach((country) => {\n    const admin = getFeatureAdmin(country.feature);\n    const isRoot = isAdminEqual(admin, [admin[0]]);\n\n    if (isRoot) return;\n\n    countriesWithSubs[admin[0]] = (countriesWithSubs[admin[0]] ?? 0) + 1;\n  });\n\n  countries = countries.filter((country) => {\n    const admin = getFeatureAdmin(country.feature);\n    const isRoot = isAdminEqual(admin, [admin[0]]);\n\n    if (isRoot && countriesWithSubs[admin[0]] > 0) return false;\n\n    return true;\n  });\n\n  countries.forEach((country) => {\n    if (!country.statsConfirmed) return;\n\n    const genPoint = (country: any) => {\n      const x = Math.random();\n\n      let idx = binarySearch(country.densities.values, x, (element: number, needle: number) => {\n        return element - needle;\n      });\n\n      if (idx < 0) idx = -idx - 1;\n\n      idx = Math.max(0, Math.min(country.densities.values.length - 1, idx));\n\n      const point = new LatLng(country.densities.lats[idx], country.densities.lngs[idx]);\n\n      point.lat += u();\n      point.lng += u();\n\n      return point;\n    };\n\n    const s = 360 / 4096 / 2;\n    const u = () => (Math.random() * 2 - 1) * s;\n    const decimation = getDecimation();\n    const startPoint = points.length;\n\n    const getNewCases = (array: number[], day: number, newCasesObj: { newCases?: number; remainder?: number } = {}) => {\n      const num = array[day] ?? 0;\n      const prev = array[day - 1] ?? 0;\n      let newCases = (num - prev) / decimation;\n      let remainder = newCasesObj.remainder ?? 0;\n\n      remainder += newCases - Math.floor(newCases);\n\n      if (remainder >= 1) {\n        const x = Math.floor(remainder);\n        newCases += x;\n        remainder -= x;\n      }\n\n      newCasesObj.remainder = remainder;\n\n      return Math.floor(newCases);\n    };\n\n    const statsConfirmedCasesObj = {};\n    const statsRecoveredCasesObj = {};\n    const statsDeadCasesObj = {};\n\n    if (!country.statsConfirmed) return;\n\n    country.statsConfirmed.forEach((_, day) => {\n      const newCases = getNewCases(country.statsConfirmed!, day, statsConfirmedCasesObj);\n\n      for (let i = 0; i < newCases; ++i) {\n        points.push({\n          point: genPoint(country),\n          time: day,\n          recoveredTime: day + 14, // FIXME: Recovery is currently assumed to be within two weeks, if there is no recovery/death data.\n        });\n      }\n    });\n\n    let pointsChanged: { recovered: number; dead: number }[] = country.statsConfirmed.map(() => ({ recovered: 0, dead: 0 }));\n\n    country.statsRecovered?.forEach((_, day) => {\n      const newCases = getNewCases(country.statsRecovered!, day, statsRecoveredCasesObj);\n\n      pointsChanged[day].recovered += newCases;\n    });\n\n    country.statsDeaths?.forEach((_, day) => {\n      const newCases = getNewCases(country.statsDeaths!, day, statsDeadCasesObj);\n\n      pointsChanged[day].dead += newCases;\n    });\n\n    let startPointUpdate = startPoint;\n\n    pointsChanged.forEach((c, day) => {\n      for (let i = 0; i < c.dead; ++i) {\n        const pt = points[startPointUpdate++];\n\n        if (pt === undefined) return; // exhausted points, inconsistent data?\n\n        pt.recoveredTime = undefined;\n        pt.deadTime = day;\n      }\n\n      for (let i = 0; i < c.recovered; ++i) {\n        const pt = points[startPointUpdate++];\n\n        if (pt === undefined) return; // exhausted points, inconsistent data?\n\n        pt.recoveredTime = day;\n      }\n    });\n  });\n\n  // Spread each point across a day, as EFHIII does\n  points.forEach((_, idx) => {\n    const spread = Math.random();\n\n    points[idx].time += spread;\n    if (points[idx].recoveredTime !== undefined) points[idx].recoveredTime! += spread;\n    if (points[idx].deadTime !== undefined) points[idx].deadTime! += spread;\n  });\n\n  const geometry = new THREE.BufferGeometry();\n  const vertices = new Float32Array(\n    points\n      .map((p: any) => {\n        const xyz = polar2Cartesian(p.point);\n        return [xyz.x, xyz.y, xyz.z];\n      })\n      .flat()\n  );\n\n  const times = new Float32Array(points.map((p) => p.time));\n  const recoveredTimes = new Float32Array(points.map((p) => p.recoveredTime ?? Number.POSITIVE_INFINITY));\n  const deadTimes = new Float32Array(points.map((p) => p.deadTime ?? Number.POSITIVE_INFINITY));\n\n  geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  geometry.setAttribute('confirmed_time', new THREE.BufferAttribute(times, 1));\n  geometry.setAttribute('recovered_time', new THREE.BufferAttribute(recoveredTimes, 1));\n  geometry.setAttribute('dead_time', new THREE.BufferAttribute(deadTimes, 1));\n\n  const material = new THREE.ShaderMaterial({\n    uniforms: {\n      time: { value: 0 },\n    },\n    vertexShader,\n    fragmentShader,\n    blending: THREE.CustomBlending,\n    blendEquation: THREE.AddEquation,\n    blendSrc: THREE.SrcAlphaFactor,\n    blendSrcAlpha: THREE.OneFactor,\n    blendDst: THREE.OneFactor,\n    transparent: true,\n    depthWrite: false,\n  });\n  const mesh = new THREE.Points(geometry, material);\n\n  globals.dispatcher.on('timeChanged.data-points', (time: number) => {\n    material.uniforms.time.value = time;\n  });\n\n  mesh.onBeforeRender = () => {\n    material.uniforms.extinction_time = { value: globals.extinction };\n    material.uniforms.keep_deaths = { value: globals.keepDeaths };\n    material.uniforms.use_recovery_data = { value: globals.useRecoveryData };\n  };\n\n  return mesh;\n};\n","import * as d3 from \"d3\";\nimport { CovidStatistics, GlobalsType, CovidStatisticsDataForRegion } from \"./types\";\n\nconst margin = [112, 96];\n\ntype DatumType = {\n  value: number | undefined;\n  date: Date;\n};\n\nfunction calcRate(array: number[]): (number | undefined)[] {\n  return array.map((next, idx) => {\n    const prev = array[idx - 1] ?? 0;\n    const rate = next / prev;\n\n    if (!Number.isFinite(rate)) return undefined;\n\n    return rate;\n  });\n}\n\nexport const generateChart = ({\n  element,\n  globals,\n  statsConfirmed,\n  statsDeaths,\n  selectedRegion,\n}: {\n  element: HTMLDivElement;\n  globals: GlobalsType;\n  statsConfirmed: CovidStatistics;\n  statsDeaths: CovidStatistics;\n  selectedRegion?: string;\n}) => {\n  d3.select(element).selectAll(\"svg#chart\").data([]).exit().remove();\n\n  const svg = d3.select(element).selectAll(\"svg#chart\").data([0]).enter().append(\"svg\").attr(\"id\", \"chart\");\n\n  const { dates, data: dataConfirmed } = statsConfirmed;\n  const { data: dataDeaths } = statsDeaths;\n  const confirmed: number[] = [];\n  const deaths: number[] = [];\n\n  selectedRegion = selectedRegion ?? 'Worldwide';\n\n  const countryFilter = (d: CovidStatisticsDataForRegion) => {\n    return selectedRegion === undefined || d.admin.some((a) => a === selectedRegion);\n  };\n\n  dataConfirmed.forEach((d) => {\n    if (!countryFilter(d)) return;\n\n    d.values.forEach((v, idx) => {\n      confirmed[idx] = (confirmed[idx] ?? 0) + v;\n    });\n  });\n\n  dataDeaths.forEach((d) => {\n    if (!countryFilter(d)) return;\n\n    d.values.forEach((v, idx) => {\n      deaths[idx] = (deaths[idx] ?? 0) + v;\n    });\n  });\n\n  const confirmedRate: (number | undefined)[] = calcRate(confirmed);\n  const deathsRate: (number | undefined)[] = calcRate(deaths);\n\n  const node = svg.node() as Element;\n\n  const x = d3.scaleTime().domain(d3.extent(dates) as [Date, Date]);\n\n  const rescaled = { x };\n\n  const yConfirmed = d3\n    .scaleLinear()\n    .domain([0, d3.max(confirmed) as number])\n    .nice();\n\n  const yDeaths = d3\n    .scaleLinear()\n    .domain([0, d3.max(deaths) as number])\n    .nice();\n\n  const rateDomain = [1, 1.25];\n\n  const yRate = d3.scaleLinear().domain(rateDomain).nice();\n\n  const xAxisD3 = d3.axisBottom(x).tickSizeOuter(0);\n  const yConfirmedAxisD3 = d3.axisLeft(yConfirmed);\n  const yDeathsAxisD3 = d3.axisRight(yDeaths);\n\n  const yConfirmedAxis = svg.append(\"g\").attr(\"class\", \"y-confirmed-axis\").call(yConfirmedAxisD3);\n\n  const yDeathsAxis = svg.append(\"g\").attr(\"class\", \"y-deaths-axis\").call(yDeathsAxisD3);\n\n  const confirmedLine = d3\n    .line()\n    .defined((d: any) => !isNaN(d.value))\n    .x((d: any) => rescaled.x(d.date))\n    .y((d: any) => yConfirmed(d.value));\n\n  const deathsLine = d3\n    .line()\n    .defined((d: any) => !isNaN(d.value))\n    .x((d: any) => rescaled.x(d.date))\n    .y((d: any) => yDeaths(d.value));\n\n  const rateLine = d3\n    .line()\n    .defined((d: any) => !isNaN(d.value))\n    .x((d: any) => rescaled.x(d.date))\n    .y((d: any) => yRate(d.value));\n\n  const defs = svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\");\n\n  const confirmedSeries = confirmed.map((x: number, idx: number) => ({\n    value: x,\n    date: dates[idx],\n  }));\n\n  const deathsSeries = deaths.map((x: number, idx: number) => ({\n    value: x,\n    date: dates[idx],\n  }));\n\n  const confirmedRateSeries = confirmedRate.map((x: number | undefined, idx: number) => ({\n    value: x,\n    date: dates[idx],\n  }));\n\n  const deathsRateSeries = deathsRate.map((x: number | undefined, idx: number) => ({\n    value: x,\n    date: dates[idx],\n  }));\n\n  const createLine = (datum: DatumType[], line: d3.Line<[number, number]>) => {\n    const path = svg\n      .append(\"path\")\n      .datum(datum)\n      .attr(\"class\", \"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"clip-path\", \"url(#clip)\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"d\", line as any);\n\n    return path;\n  };\n\n  createLine(confirmedRateSeries, rateLine).attr(\"stroke\", \"steelblue\").attr(\"stroke-opacity\", \"33%\").attr(\"class\", \"rate-path\");\n\n  createLine(deathsRateSeries, rateLine).attr(\"stroke\", \"red\").attr(\"stroke-opacity\", \"33%\").attr(\"class\", \"rate-path\");\n\n  createLine(confirmedSeries, confirmedLine).attr(\"stroke\", \"steelblue\").attr(\"class\", \"confirmed-path\");\n\n  createLine(deathsSeries, deathsLine).attr(\"stroke\", \"red\").attr(\"class\", \"deaths-path\");\n\n  var chartOverlay = svg.append(\"g\").attr(\"clip-path\", \"url(#clip)\").attr(\"class\", \"chart-overlay\");\n\n  const currentTimeDrag = chartOverlay\n    .append(\"path\")\n    .attr(\"class\", \"current-time current-time-drag\")\n    .style(\"stroke\", \"yellow\")\n    .style(\"stroke-width\", \"16px\");\n\n  chartOverlay.append(\"path\").attr(\"class\", \"current-time\").style(\"stroke\", \"red\").style(\"stroke-width\", \"1px\");\n\n  const currentTime = chartOverlay.selectAll(\".current-time\");\n\n  let lastDate: Date | undefined = undefined;\n\n  const updateTimeIndicator = (date: Date | undefined = undefined) => {\n    if (date !== undefined) {\n      lastDate = date;\n    } else date = lastDate;\n\n    if (date === undefined) return;\n\n    const { /*width, */ height } = node.getBoundingClientRect();\n    const xp = rescaled.x(date);\n\n    currentTime\n      .datum([\n        [xp, margin[1]],\n        [xp, height - margin[1]],\n      ])\n      .attr(\"d\", d3.line() as any);\n  };\n\n  globals.dispatcher.on(\"timeChanged.chart\", (time: number, date: Date) => updateTimeIndicator(date));\n\n  const xAxis = svg.append(\"g\").attr(\"clip-path\", \"url(#clip)\").append(\"g\").attr(\"class\", \"x-axis\").call(xAxisD3);\n\n  svg\n    .append(\"text\")\n    .classed(\"title\", true)\n    .attr(\"x\", \"50%\")\n    .attr(\"y\", 64)\n    .text(selectedRegion);\n\n  svg.append(\"text\").classed(\"legend-left\", true).attr(\"x\", \"0%\").attr(\"y\", 128).text(\"Confirmed\");\n\n  svg.append(\"text\").classed(\"legend-right\", true).attr(\"x\", \"100%\").attr(\"y\", 128).text(\"Deaths\");\n\n  function getClientPointDate() {\n    const evt = d3.event;\n    const cp = (evt.type === \"drag\" && [evt.x, evt.y]) || d3.clientPoint(evt.target, evt);\n    const d = rescaled.x.invert(cp[0]);\n\n    return d;\n  }\n\n  svg.on(\"click\", () => {\n    globals.date = getClientPointDate();\n  });\n\n  const dragState = { paused: false };\n  const currentTimeDragd3 = d3\n    .drag()\n    .on(\"start\", () => {\n      dragState.paused = globals.paused;\n      globals.paused = true;\n    })\n    .on(\"end\", () => {\n      globals.paused = dragState.paused;\n    })\n    .on(\"drag\", () => {\n      globals.date = getClientPointDate();\n    });\n\n  currentTimeDrag.call(currentTimeDragd3 as any);\n\n  let previousSize: { width?: number; height?: number } = {};\n  let d3zoom: d3.ZoomBehavior<Element, unknown>;\n\n  const zoom = (svg: any) => {\n    const { width, height } = node.getBoundingClientRect();\n\n    const extent: [[number, number], [number, number]] = [\n      [margin[0], margin[1]],\n      [width - margin[0], height - margin[1]],\n    ];\n\n    const zoomed = () => {\n      const transform = d3.event?.transform ?? d3.zoomTransform(svg.node());\n\n      rescaled.x = transform.rescaleX(x);\n\n      svg.selectAll(\".confirmed-path\").attr(\"d\", confirmedLine);\n\n      svg.selectAll(\".deaths-path\").attr(\"d\", deathsLine);\n\n      svg.selectAll(\".rate-path\").attr(\"d\", rateLine);\n\n      xAxisD3.scale(rescaled.x);\n\n      svg.select(\".x-axis\").call(xAxisD3);\n\n      updateTimeIndicator();\n    };\n\n    const zooming = d3\n      .zoom()\n      .scaleExtent([1, 20])\n      //.translateExtent(extent)\n      .extent(extent)\n      .on(\"zoom\", zoomed);\n\n    d3zoom = zooming;\n\n    svg.call(zooming);\n    zoomed();\n  };\n\n  // Handle resize\n  const updateSize = () => {\n    if (!node) return;\n\n    const { width, height } = node.getBoundingClientRect();\n\n    x.range([0 + margin[0], width - margin[0]]);\n    [yConfirmed, yDeaths, yRate].forEach((y) => y.range([height - margin[1], 0 + margin[1]]));\n    xAxis.attr(\"transform\", `translate(0,${height - margin[1]})`).call(xAxisD3);\n    yConfirmedAxis.attr(\"transform\", `translate(${0 + margin[0]},0)`).call(yConfirmedAxisD3);\n    yDeathsAxis.attr(\"transform\", `translate(${width - margin[0]},0)`).call(yDeathsAxisD3);\n    defs\n      .attr(\"x\", margin[0])\n      .attr(\"y\", margin[1])\n      .attr(\"width\", width - margin[0] * 2)\n      .attr(\"height\", height - margin[1]);\n\n    if (previousSize.width !== undefined) {\n      svg.call(d3zoom.transform as any, d3.zoomIdentity); // FIXME: Should update transform for new size\n    }\n\n    previousSize = { width, height };\n\n    svg.call(zoom);\n  };\n\n  const resizeObserver = new ResizeObserver(updateSize);\n\n  resizeObserver.observe(element);\n};\n","import React, { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport HelpIcon from '@material-ui/icons/Help';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport IconButton from '@material-ui/core/IconButton';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport {\n  Collapse,\n  Fade,\n  Grow,\n  Link,\n  Backdrop,\n  TextField,\n  Slider,\n  Grid,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  FormControl,\n  Select,\n  InputLabel,\n  MenuItem,\n} from '@material-ui/core';\nimport useForceUpdate from 'use-force-update';\nimport { getDecimation } from './data-points';\nimport { responseToJson } from './common';\n\nfunction handleChange<T>(f: (v: T) => void) {\n  return (_: React.ChangeEvent<{}>, v: any) => f(v as T);\n}\n\n// Why be consistent\nfunction handleChange2<T>(f: (v: T) => void) {\n  return (event: React.ChangeEvent<{ value: T }>) => f(event.target.value as T);\n}\n\nexport default function UiOverlay(props: any) {\n  const { paused, setPaused, dataSource, setDataSource, globals } = props;\n  const forceUpdate = useForceUpdate();\n\n  const useGlobal = <T extends unknown>(propName: string): [T, (v: T) => void] => {\n    return [\n      globals[propName] as T,\n      (v: T) => {\n        globals[propName] = v;\n        forceUpdate();\n      },\n    ];\n  };\n\n  const [helpExpanded, setHelpExpanded] = useState<boolean>(false);\n  const [parametersExpanded, setParametersExpanded] = useState<boolean>(false);\n  const [sourcesExpanded, setSourcesExpanded] = useState<boolean>(false);\n  const [dependenciesExpanded, setDependenciesExpanded] = useState<boolean>(false);\n  const [licenses, setLicenses] = useState<any>();\n  const [shownLicense, setShownLicense] = useState<string>();\n  const [extinctionEnabled, setExtinctionEnabled] = useState<boolean>(globals.extinction !== Number.POSITIVE_INFINITY);\n  const [extinction, setExtinction] = useState<number>(Math.min(globals.extinction, 3));\n  const [keepDeaths, setKeepDeaths] = useGlobal<boolean>('keepDeaths');\n  const [useRecoveryData, setUseRecoveryData] = useGlobal<boolean>('useRecoveryData');\n  const expanded = helpExpanded || parametersExpanded;\n\n  useEffect(() => {\n    if (licenses !== undefined || !dependenciesExpanded) return;\n\n    (async () => {\n      const li = await responseToJson(fetch('./licenseInfos.json'));\n\n      setLicenses(li);\n    })();\n  }, [dependenciesExpanded, licenses]);\n\n  useEffect(() => {\n    globals.extinction = extinctionEnabled ? extinction : Number.POSITIVE_INFINITY;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [extinction, extinctionEnabled]);\n\n  return (\n    <div className=\"ui-overlay\">\n      <Fade in={!expanded}>\n        <div className=\"buttons\">\n          <IconButton aria-label=\"pause toggle\" onClick={() => setPaused(!paused)} className=\"pause-toggle\">\n            {paused ? <PlayArrowIcon /> : <PauseIcon />}\n          </IconButton>\n          <IconButton aria-label=\"change visualization parameters\" onClick={() => setParametersExpanded(true)} className=\"parameters\">\n            <TuneIcon />\n          </IconButton>\n          <IconButton aria-label=\"help\" onClick={() => setHelpExpanded(true)} className=\"help\">\n            <HelpIcon />\n          </IconButton>\n        </div>\n      </Fade>\n      <Grow in={parametersExpanded} unmountOnExit>\n        <div className=\"info-card\">\n          <Card>\n            <CardContent className=\"description\">\n              <Typography variant=\"h5\" component=\"h2\">\n                Visualization parameters\n              </Typography>\n              <FormGroup row>\n                <FormControl variant=\"filled\" fullWidth>\n                  <InputLabel id=\"demo-simple-select-filled-label\">Data source</InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-filled-label\"\n                    id=\"demo-simple-select-filled\"\n                    value={dataSource}\n                    onChange={handleChange2(setDataSource)}\n                  >\n                    <MenuItem value=\"google\">COVID-19 Open-Data</MenuItem>\n                    <MenuItem value=\"jhu\">JHU CSSE COVID-19 Data</MenuItem>\n                    <MenuItem value=\"bing\">Microsoft Bing COVID-19 data</MenuItem>\n                  </Select>\n                </FormControl>\n              </FormGroup>\n              <FormGroup row>\n                <FormControlLabel\n                  control={<Checkbox checked={extinctionEnabled} onChange={handleChange(setExtinctionEnabled)} />}\n                  label=\"Extinction\"\n                />\n              </FormGroup>\n              <Grid container spacing={2}>\n                <Grid item xs>\n                  <Slider\n                    value={extinction}\n                    onChange={handleChange(setExtinction)}\n                    aria-labelledby=\"extinction\"\n                    valueLabelDisplay=\"auto\"\n                    disabled={!extinctionEnabled}\n                    min={1}\n                  />\n                </Grid>\n                <Grid item>\n                  <Typography>\n                    {extinction} day{extinction > 1 ? `s` : null}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <FormGroup row>\n                <FormControlLabel\n                  control={<Checkbox checked={keepDeaths} onChange={handleChange(setKeepDeaths)} disabled={!extinctionEnabled} />}\n                  label=\"Keep deaths\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={useRecoveryData} onChange={handleChange(setUseRecoveryData)} />}\n                  label=\"Use recovery data\"\n                />\n              </FormGroup>\n            </CardContent>\n            <CardActions>\n              <Button size=\"small\" onClick={() => setParametersExpanded(false)}>\n                Dismiss\n              </Button>\n            </CardActions>\n          </Card>\n        </div>\n      </Grow>\n      <Grow in={helpExpanded} unmountOnExit>\n        <div className=\"info-card\">\n          <Card>\n            <CardContent className=\"description\">\n              <Typography variant=\"h5\" component=\"h2\">\n                COVID-19 Visualizer\n              </Typography>\n\n              <Typography paragraph>\n                This webapp fetches the latest <Link href=\"https://github.com/CSSEGISandData/COVID-19\">JHU CSSE COVID-19 Data</Link> and generates a\n                point-based visualization in <Link href=\"https://threejs.org/\">three.js</Link> on top of a{' '}\n                <Link href=\"https://github.com/vasturiano/three-globe\">ThreeJS Globe Visualization</Link>. This visualization largely follows the same\n                approach as in <Link href=\"https://github.com/EFHIII/COVID-19\">Edward Haas's COVID-19 Confirmed cases map over time</Link>, but with\n                interactive parameters (e.g. point extinction) and processed in real-time using the latest data.\n              </Typography>\n\n              <Typography paragraph>Each point in the visualizer represents {getDecimation()} cases.</Typography>\n\n              <ul>\n                <li>\n                  <Typography>\n                    <span style={{ color: 'steelblue' }}>Blue</span> represents confirmed cases\n                  </Typography>\n                </li>\n                <li>\n                  <Typography>\n                    <span style={{ color: 'red' }}>Red</span> represents deaths\n                  </Typography>\n                </li>\n                <li>\n                  <Typography>\n                    <span style={{ color: 'green' }}>Green</span> represents recovered cases\n                    <br />\n                    In many cases, the recovered case data is unreliable or missing. This visualizer assumes a recovery time of 14 days if no other\n                    data is available.\n                  </Typography>\n                </li>\n              </ul>\n\n              <Typography paragraph>The points are positioned randomly within each region according to population density.</Typography>\n\n              <Typography paragraph>\n                The blue and red lines on the chart indicate confirmed cases and deaths, respectively. The faint blue and red lines represent the\n                multiplicative increase in confirmed cases and deaths, respectively, from the following day. The plot's range is 1.0x-1.25x\n                (bottom-top) daily growth factor.\n              </Typography>\n\n              <Typography paragraph>\n                You can click on the globe to limit the chart to a specific region. Clicking outside any region, reverts the chart to global mode.\n              </Typography>\n\n              <Typography paragraph>\n                The chart is draggable and zoomable in the time-axis. Clicking on a point in the chart will revert the visualization to the clicked\n                time. The current time indicator can be dragged for scrubbing purposes.\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Button size=\"small\" onClick={() => setHelpExpanded(false)}>\n                Dismiss\n              </Button>\n              <Button size=\"small\" onClick={() => setSourcesExpanded(!sourcesExpanded)}>\n                Sources\n              </Button>\n              <Button size=\"small\" onClick={() => setDependenciesExpanded(!dependenciesExpanded)}>\n                Dependencies\n              </Button>\n              <Button size=\"small\" href=\"https://github.com/trylle/covid-viz\">\n                GitHub\n              </Button>\n            </CardActions>\n            <Collapse in={sourcesExpanded} timeout=\"auto\" unmountOnExit>\n              <CardContent className=\"sources\">\n                <Typography paragraph>\n                  The COVID-19 statistics for this visualizer are sourced from{' '}\n                  <Link href=\"https://github.com/CSSEGISandData/COVID-19\">JHU CSSE COVID-19 Data</Link>.\n                </Typography>\n\n                <Typography paragraph>\n                  Population density is derived from the{' '}\n                  <Link href=\"https://ghsl.jrc.ec.europa.eu/download.php?ds=pop\">Global Human Settlement Layer</Link>. Schiavina, Marcello; Freire,\n                  Sergio; MacManus, Kytt (2019): GHS population grid multitemporal (1975, 1990, 2000, 2015) R2019A. European Commission, Joint\n                  Research Centre (JRC) DOI: 10.2905/42E8BE89-54FF-464E-BE7B-BF9E64DA5218 PID:\n                  http://data.europa.eu/89h/0c6b9751-a71f-4062-830b-43c9f432370f.\n                </Typography>\n\n                <Typography paragraph>\n                  World &amp; US GeoJson data was sourced from <Link href=\"https://github.com/nvkelso/natural-earth-vector\">Natural Earth</Link>.\n                </Typography>\n\n                <Typography paragraph>\n                  China GeoJson data was sourced from <Link href=\"https://gadm.org/download_country_v3.html\">GADM</Link>.\n                </Typography>\n\n                <Typography paragraph>\n                  Bathymetry texture was sourced from{' '}\n                  <Link href=\"https://www.naturalearthdata.com/downloads/50m-raster-data/50m-bathymetry\">Natural Earth</Link>.\n                </Typography>\n              </CardContent>\n            </Collapse>\n            <Collapse in={dependenciesExpanded} timeout=\"auto\" unmountOnExit>\n              <CardContent className=\"dependencies\">\n                <Typography paragraph>This application uses the following libraries:</Typography>\n                {Object.keys(licenses ?? {}).map((name) => {\n                  const l = licenses[name];\n\n                  return (\n                    <Typography key={name} paragraph>\n                      <Link href={l.repository}>{name}</Link> licensed as <Link onClick={() => setShownLicense(l.licenseText)}>{l.license}</Link>.\n                    </Typography>\n                  );\n                })}\n              </CardContent>\n            </Collapse>\n          </Card>\n        </div>\n      </Grow>\n      <Backdrop open={shownLicense !== undefined} onClick={() => setShownLicense(undefined)} className=\"license-backdrop\">\n        <Card className=\"license-card\">\n          <CardContent className=\"license-content\">\n            <TextField multiline value={shownLicense} InputProps={{ readOnly: true }} />\n          </CardContent>\n        </Card>\n      </Backdrop>\n    </div>\n  );\n}\n","import * as d3 from 'd3';\nimport { FeatureCollection } from 'geojson';\nimport assert from 'assert';\nimport { CovidStatistics, DenseCovidStatisticsDataForRegion, GlobalsType, isAdminEqual } from './types';\nimport { CallbacksType } from './data-sources';\n\nfunction getConsistentAdmin(admin: Array<any>) {\n  admin = admin.map((v: any) => {\n    if (v === '') return undefined;\n\n    return v;\n  });\n\n  if (admin[0] === 'US' || admin[0] === 'United States') admin[0] = 'United States of America';\n\n  return admin;\n}\n\nexport const processCsseCovidData = async (\n  path = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv',\n  countriesGeoJson: FeatureCollection\n): Promise<CovidStatistics> => {\n  const parseDate = d3.timeParse('%-m/%-d/%y');\n\n  const findStartDateIdx = (keys: string[]) => {\n    return keys.findIndex((k) => {\n      return parseDate(k) !== null;\n    });\n  };\n\n  const data = await d3.csv(path, (d) => {\n    const admin = getConsistentAdmin([\n      (d['Country/Region'] ?? d['Country_Region']) as string,\n      (d['Province/State'] ?? d['Province_State']) as string,\n    ]);\n    const keys = Object.keys(d);\n    const values = [];\n    const dateStartIdx = findStartDateIdx(keys);\n\n    for (let i = dateStartIdx; i < keys.length; ++i) {\n      const key = keys[i];\n      const c = d[key];\n\n      assert(c !== undefined);\n\n      values.push(+c);\n    }\n\n    return DenseCovidStatisticsDataForRegion.create(admin, values);\n  });\n\n  for (let i = 0; i < data.length; ++i) {\n    const s = data[i];\n\n    for (let j = i + 1; j < data.length; ++j) {\n      const t = data[j];\n\n      if (!isAdminEqual(s.admin, t.admin)) continue;\n\n      s.values = s.values.map((v, idx) => {\n        return v + t.values[idx];\n      });\n      data.splice(j, 1);\n      --j;\n    }\n  }\n\n  const keys = data.columns;\n  const dates: Date[] = [];\n  const dateStartIdx = findStartDateIdx(keys);\n\n  for (let i = dateStartIdx; i < keys.length; ++i) {\n    const key = keys[i];\n    const date = parseDate(key);\n\n    assert(date);\n\n    dates.push(date);\n  }\n\n  return { dates, data };\n};\n\nexport type StatisticsRequests = { path: string; func: Function; data?: CovidStatistics }[];\n\nexport const processStatistics = async (requests: StatisticsRequests, countriesGeoJson: FeatureCollection, globals: GlobalsType) => {\n  const funcs = new Map<Function, CovidStatistics[]>();\n  await Promise.allSettled(\n    requests.map(async (r) => {\n      const { func, path } = r;\n      const data = await processCsseCovidData(path, countriesGeoJson);\n\n      if (!funcs.has(func)) funcs.set(func, []);\n\n      funcs.get(func)!.push(data);\n    })\n  );\n\n  // FIXME: Handle different dates\n\n  [...funcs.keys()].forEach((func) => {\n    const datas = funcs.get(func)!;\n    const finalized: CovidStatistics = {\n      data: [],\n      dates: [],\n    };\n\n    for (const data of datas) {\n      if (finalized.dates.length === 0) finalized.dates = data.dates;\n\n      finalized.data.push(...data.data);\n    }\n\n    if (globals.startDate === undefined) globals.startDate = finalized.dates[0];\n\n    const worldwideValues = new Array(finalized.dates.length).fill(0);\n\n    finalized.data.forEach((region) => {\n      const { admin, values } = region;\n\n      if (admin[0] === undefined || admin.reduce((accumulator, currentValue) => accumulator + (currentValue !== undefined ? 1 : 0), 0) !== 1) return;\n\n      worldwideValues.forEach((_, idx) => {\n        worldwideValues[idx] += values[idx];\n      });\n    });\n\n    finalized.data.push(DenseCovidStatisticsDataForRegion.create(['Worldwide'], worldwideValues));\n\n    func(finalized);\n  });\n};\n\nexport default function generateCsseRequests(countriesGeoJson: FeatureCollection, globals: GlobalsType, callbacks: CallbacksType) {\n  const requests = [\n    {\n      path:\n        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv',\n      func: callbacks.setStatsConfirmed,\n    },\n    {\n      path:\n        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv',\n      func: callbacks.setStatsRecovered,\n    },\n    {\n      path:\n        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv',\n      func: callbacks.setStatsDeaths,\n    },\n\n    // US\n    {\n      path:\n        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv',\n      func: callbacks.setStatsConfirmed,\n    },\n    {\n      path:\n        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv',\n      func: callbacks.setStatsDeaths,\n    },\n  ];\n\n  processStatistics(requests, countriesGeoJson, globals);\n}\n","import * as d3 from 'd3';\nimport { FeatureCollection } from 'geojson';\nimport { CallbacksType } from './data-sources';\nimport { DenseCovidStatisticsDataForRegion, GlobalsType } from './types';\n\nfunction getConsistentAdmin(admin: Array<any>) {\n  admin = admin.map((v: any) => {\n    if (v === '') return undefined;\n\n    return v;\n  });\n\n  if (admin[0] === 'US' || admin[0] === 'United States') admin[0] = 'United States of America';\n  if (admin[0] === 'China (mainland)') admin[0] = 'China'; // Displaying my ignorance of geopolitics\n\n  return admin;\n}\n\nexport default async function generateBingRequests(countriesGeoJson: FeatureCollection, globals: GlobalsType, callbacks: CallbacksType) {\n  const path = 'https://raw.githubusercontent.com/microsoft/Bing-COVID-19-Data/master/data/Bing-COVID19-Data.csv';\n  const parseDate = d3.timeParse('%-m/%-d/%Y');\n  const sharedDates = new Map<number, Date>();\n  const parseSharedDate = (str: string) => {\n    const d = parseDate(str);\n\n    if (!d) return d;\n\n    const dn = d.valueOf();\n    const sd = sharedDates.get(dn);\n\n    if (sd) return sd;\n\n    sharedDates.set(dn, d);\n\n    return d;\n  };\n\n  const genAdminKey = (admin: (string | undefined)[]) => {\n    return admin.map((a) => a ?? '').join('/');\n  };\n\n  const data = await d3.csv(path, (d) => {\n    const admin = getConsistentAdmin([d['Country_Region'], d['AdminRegion1'], d['AdminRegion2']]);\n    const adminKey = genAdminKey(admin);\n    const date = parseSharedDate(d['Updated'] as string);\n    const confirmed = d['Confirmed'];\n    const recovered = d['Recovered'];\n    const deaths = d['Deaths'];\n\n    return { admin, adminKey, date, confirmed, recovered, deaths };\n  });\n\n  const dates = Array.from(sharedDates.values()).sort((a, b) => a.valueOf() - b.valueOf());\n  const dateToIndex = new Map<Date, number>();\n\n  dates.forEach((d, idx) => dateToIndex.set(d, idx));\n\n  const regionData = new Map<\n    string,\n    {\n      admin: any[];\n      confirmed: Map<number, number>;\n      recovered: Map<number, number>;\n      deaths: Map<number, number>;\n    }\n  >();\n\n  data.forEach((row) => {\n    const { admin, adminKey, date, confirmed, recovered, deaths } = row;\n\n    if (!date) return;\n\n    let cd = regionData.get(adminKey);\n\n    if (!cd) {\n      cd = {\n        admin,\n        confirmed: new Map<number, number>(),\n        recovered: new Map<number, number>(),\n        deaths: new Map<number, number>(),\n      };\n\n      regionData.set(row.adminKey, cd);\n    }\n\n    const idx = dateToIndex.get(date)!;\n\n    if (confirmed !== undefined) cd.confirmed.set(idx, +confirmed);\n    if (recovered !== undefined) cd.recovered.set(idx, +recovered);\n    if (deaths !== undefined) cd.deaths.set(idx, +deaths);\n  });\n\n  const makeContiguous = (data: (number | undefined)[]): number[] => {\n    const cdata = new Array(data.length).fill(0);\n    let last = 0;\n\n    return cdata.map((_, idx) => {\n      const val = data[idx] ?? last;\n\n      last = val;\n\n      return val;\n    });\n  };\n\n  const genStats = (key: string) => {\n    return {\n      dates,\n      data: Array.from(regionData).map(([_, data]) => {\n        return DenseCovidStatisticsDataForRegion.create(data.admin, makeContiguous((data as any)[key] as (number | undefined)[]));\n      }),\n    };\n  };\n\n  callbacks.setStatsConfirmed(genStats('confirmed'));\n  callbacks.setStatsRecovered(genStats('recovered'));\n  callbacks.setStatsDeaths(genStats('deaths'));\n\n  if (globals.startDate === undefined) globals.startDate = dates[0];\n}\n","import * as d3 from 'd3';\nimport { FeatureCollection } from 'geojson';\nimport assert from 'assert';\nimport { CallbacksType } from './data-sources';\nimport {\n  Admin,\n  CovidStatisticsDataForRegion,\n  DenseCovidStatisticsDataForRegion,\n  GlobalsType,\n  isAdminEqual,\n  SparseCovidStatisticsDataForRegion,\n} from './types';\n\n// TODO: https://github.com/TheEconomist/covid-19-excess-deaths-tracker\n\n// https://github.com/GoogleCloudPlatform/covid-19-open-data\n\nconst geographyUri = 'https://storage.googleapis.com/covid19-open-data/v2/index.csv';\nconst epidemiologyUri = 'https://storage.googleapis.com/covid19-open-data/v2/epidemiology.csv';\n\nfunction getConsistentAdmin(admin: Array<any>): (string | undefined)[] {\n  admin = admin.map((v: any) => {\n    if (v === '') return undefined;\n\n    return v;\n  });\n\n  return admin;\n}\n\nclass DateCache {\n  cache = new Map<number, Date>();\n\n  gc(d: Date | null | undefined): Date | undefined {\n    if (!d) return undefined;\n\n    const dn = d.valueOf();\n    const sd = this.cache.get(dn);\n\n    if (sd) return sd;\n\n    this.cache.set(dn, d);\n\n    return d;\n  }\n\n  get dates() {\n    return Array.from(this.cache.values()).sort((a, b) => a.valueOf() - b.valueOf());\n  }\n}\n\nconst genAdminKey = (admin: (string | undefined)[]) => {\n  return admin.map((a) => a ?? '').join('/');\n};\n\nclass AdminCache {\n  cache = new Map<string, Admin>();\n\n  gc(admin: Admin | undefined): Admin | undefined {\n    if (!admin) return undefined;\n\n    const key = genAdminKey(admin);\n    const sd = this.cache.get(key);\n\n    if (sd) return sd;\n\n    this.cache.set(key, admin);\n\n    return admin;\n  }\n}\n\nexport default async function generateGoogleRequests(countriesGeoJson: FeatureCollection, globals: GlobalsType, callbacks: CallbacksType) {\n  const cache = await caches.open('v1');\n  const uris = [geographyUri, epidemiologyUri];\n\n  const [geographyCsv, epidemiologyCsv] = await Promise.all(\n    uris.map(async (uri) => {\n      let r = await cache.match(uri);\n\n      const expires = r?.headers?.get?.('expires');\n      const valid = new Date(expires ?? 0) > new Date();\n\n      if (!valid) {\n        await cache.add(uri);\n        r = await cache.match(uri);\n      }\n\n      return await r?.text?.();\n    })\n  );\n\n  assert(geographyCsv && epidemiologyCsv);\n\n  const ac = new AdminCache();\n  const googleKeyToAdmin = new Map<string, Admin>();\n  const geography = await d3.csvParse(geographyCsv, (d) => {\n    const key = d['key']!;\n    const admin = getConsistentAdmin([d['country_name'], d['subregion1_name'], d['subregion2_name'], d['locality_name']]);\n\n    return { key, admin: ac.gc(admin)! };\n  });\n\n  geography.forEach(({ key, admin }) => {\n    googleKeyToAdmin.set(key, admin);\n  });\n\n  const parseDate = d3.timeParse('%Y-%-m-%-d');\n  const dc = new DateCache();\n  const parseSharedDate = (str: string) => {\n    const d = parseDate(str);\n\n    return dc.gc(d);\n  };\n\n  const data = await d3.csvParse(epidemiologyCsv, (d) => {\n    const key = d['key'];\n    const admin = key !== undefined ? googleKeyToAdmin.get(key) : undefined;\n\n    if (!admin) return;\n\n    const confirmed = d['total_confirmed'];\n    const recovered = d['total_recovered'];\n    const deaths = d['total_deceased'];\n    const tested = d['total_tested']; // TODO?\n\n    if (confirmed === '' && recovered === '' && deaths === '' && tested === '') return;\n\n    const date = parseSharedDate(d['date'] as string);\n\n    return { key: key!, admin, date, confirmed, recovered, deaths, tested };\n  });\n\n  const datesWithData = dc.dates;\n  const startDate = datesWithData[0];\n  const lastDate = datesWithData[datesWithData.length - 1];\n\n  for (let d = startDate; d < lastDate; d.setDate(d.getDate() + 1)) {\n    dc.gc(d);\n  }\n\n  const dates = dc.dates;\n  const dateToIndex = new Map<Date, number>();\n\n  dates.forEach((d, idx) => dateToIndex.set(d, idx));\n\n  const regionData = new Map<\n    string,\n    {\n      admin: any[];\n      confirmed: Map<number, number>;\n      recovered: Map<number, number>;\n      deaths: Map<number, number>;\n    }\n  >();\n\n  data.forEach((row) => {\n    const { key, admin, date, confirmed, recovered, deaths } = row;\n\n    if (!date) return;\n\n    let cd = regionData.get(key);\n\n    if (!cd) {\n      cd = {\n        admin,\n        confirmed: new Map<number, number>(),\n        recovered: new Map<number, number>(),\n        deaths: new Map<number, number>(),\n      };\n\n      regionData.set(key, cd);\n    }\n\n    const idx = dateToIndex.get(date)!;\n\n    if (confirmed !== undefined) cd.confirmed.set(idx, +confirmed);\n    if (recovered !== undefined) cd.recovered.set(idx, +recovered);\n    if (deaths !== undefined) cd.deaths.set(idx, +deaths);\n  });\n\n  const genStats = (key: string) => {\n    let data: CovidStatisticsDataForRegion[] = Array.from(regionData).map(([_, data]) => {\n      const s = new SparseCovidStatisticsDataForRegion();\n\n      s.admin = data.admin;\n\n      const d = Array.from(((data as any)[key] as Map<number, number>).entries()).sort(([_lv, leftIndex], [_rv, rightIndex]) => {\n        return leftIndex - rightIndex;\n      });\n\n      s.days = d.map(([day, _]) => day);\n      s.data = d.map(([_, data]) => data);\n\n      // FIXME: Should be handled in data-points.ts\n      const lastDay = dates.length - 1;\n\n      if (s.days[s.days.length - 1] !== lastDay) {\n        s.data.push(s.getValue(lastDay));\n        s.days.push(lastDay);\n      }\n\n      return s;\n    });\n\n    const worldwide = new DenseCovidStatisticsDataForRegion();\n    const admin0data = data.filter((d) => {\n      const a = [d.admin[0]];\n\n      return a[0] !== undefined && isAdminEqual(a, d.admin);\n    });\n\n    worldwide.admin = ['Worldwide'];\n    worldwide.values = dates.map((_, idx) => {\n      return admin0data.reduce((accumulator, currentValue) => {\n        accumulator += currentValue.getValue(idx);\n\n        return accumulator;\n      }, 0);\n    });\n\n    data.push(worldwide);\n\n    return {\n      dates,\n      data,\n    };\n  };\n\n  callbacks.setStatsConfirmed(genStats('confirmed'));\n  callbacks.setStatsRecovered(genStats('recovered'));\n  callbacks.setStatsDeaths(genStats('deaths'));\n\n  if (globals.startDate === undefined) globals.startDate = dates[0];\n}\n","import * as geojson from 'geojson';\nimport { CovidStatistics, GlobalsType } from './types';\nimport generateCsseRequests from './data-source-csse';\nimport generateBingRequests from './data-source-bing';\nimport generateGoogleRequests from './data-source-google';\n\nexport type CallbacksType = {\n  setStatsConfirmed: (s: CovidStatistics) => void;\n  setStatsRecovered: (s: CovidStatistics) => void;\n  setStatsDeaths: (s: CovidStatistics) => void;\n};\n\nexport function getCovidData(dataSource: string, countriesGeoJson: geojson.FeatureCollection, globals: GlobalsType, callbacks: CallbacksType) {\n  switch (dataSource) {\n    case 'jhu':\n      generateCsseRequests(countriesGeoJson, globals, callbacks);\n      break;\n    case 'bing':\n      generateBingRequests(countriesGeoJson, globals, callbacks);\n      break;\n    case 'google':\n      generateGoogleRequests(countriesGeoJson, globals, callbacks);\n      break;\n    default:\n      return;\n  }\n}\n","import * as THREE from 'three';\nimport * as geojson from 'geojson';\nimport { geoJSON, LatLng } from 'leaflet';\nimport { GLOBE_RADIUS, polar2Cartesian } from './three-globe';\n\nfunction generateCoordinates(geoJsonGeometry: geojson.Geometry, radius: number, vertices: number[], indices: number[]) {\n  if (geoJsonGeometry.type === 'MultiPolygon') {\n    geoJsonGeometry.coordinates.forEach((coordinates: any) => {\n      generateCoordinates({ type: 'Polygon', coordinates }, radius, vertices, indices);\n    });\n  }\n\n  if (geoJsonGeometry.type === 'Polygon') {\n    geoJsonGeometry.coordinates.forEach((linearRing: any) => {\n      const startIdx = vertices.length / 3;\n      let prev: LatLng | undefined;\n\n      linearRing.forEach((coordinate: any) => {\n        const l = new LatLng(coordinate[1], coordinate[0]);\n        const maxdist = 3e5;\n\n        const addpt = (l: LatLng) => {\n          const cart = polar2Cartesian(l, radius / GLOBE_RADIUS - 1);\n\n          vertices.push(cart.x, cart.y, cart.z);\n          prev = l;\n        };\n\n        const d = prev === undefined ? 0 : l.distanceTo(prev);\n        const overscale = Math.ceil(d / maxdist);\n\n        if (overscale <= 1) {\n          addpt(l);\n\n          return;\n        }\n\n        const origprev = prev!;\n\n        for (let i = 1; i <= overscale; ++i) {\n          const d = i / overscale;\n          const pt = new LatLng(origprev.lat * (1 - d) + l.lat * d, origprev.lng * (1 - d) + l.lng * d);\n\n          addpt(pt);\n        }\n      });\n\n      const endIdx = vertices.length / 3;\n\n      for (let i = startIdx; i < endIdx - 1; ++i) {\n        indices.push(i, i + 1);\n      }\n    });\n  }\n}\n\nexport function generateLinesFromFeatureGeometry(\n  geoJsonGeometry: geojson.Geometry | geojson.Geometry[],\n  material: THREE.Material,\n  radius: number = GLOBE_RADIUS\n) {\n  const bufferGeometry = new THREE.BufferGeometry();\n  const vertices: number[] = [];\n  const indices: number[] = [];\n\n  if ((geoJsonGeometry as geojson.Geometry[]).length !== undefined)\n    (geoJsonGeometry as geojson.Geometry[]).forEach((g) => generateCoordinates(g, radius, vertices, indices));\n  else generateCoordinates(geoJsonGeometry as geojson.Geometry, radius, vertices, indices);\n\n  const vertexData = new Float32Array(vertices);\n  const attribute = new THREE.BufferAttribute(vertexData, 3);\n\n  bufferGeometry.setAttribute('position', attribute);\n  bufferGeometry.setIndex(indices);\n\n  //const geometry = new GeoJsonGeometry(country.geometry as any /* messed up types */, GLOBE_RADIUS, 10);\n  const lines = new THREE.LineSegments(bufferGeometry, material);\n  /*const pos = bufferGeometry.attributes['position'].array;\n\n  for (let i = 0; i < pos.length; i += 3) {\n    const v = new THREE.Vector3(pos[i], pos[i + 1], pos[i + 2]);\n\n    // assert(Math.abs(v.length() - GLOBE_RADIUS) < 1e-3);\n  }*/\n\n  return lines;\n}\n\nexport function generateLinesFromFeatureCollection(\n  admin1GeoJson: geojson.FeatureCollection,\n  material: THREE.Material,\n  radius: number = GLOBE_RADIUS\n) {\n  const geometries: geojson.Geometry[] = [];\n\n  for (const featureCollection of admin1GeoJson.features) {\n    geometries.push(featureCollection.geometry);\n  }\n\n  const lines = generateLinesFromFeatureGeometry(geometries, material, radius);\n\n  return lines;\n}\n","import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport ThreeGlobe from 'three-globe';\nimport { GeoJsonGeometry } from 'three-geojson-geometry';\nimport * as geojson from 'geojson';\nimport * as d3 from 'd3';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { initScene, createLatLngClickHandler } from './scene';\nimport { getCountryDensities, CountryDensities } from './country-densities';\nimport { generateDatapoints } from './data-points';\nimport { CovidStatistics, GlobalsType } from './types';\nimport { generateChart } from './chart';\nimport { getAdmin0Features, getAdmin1Features, getFeatureAdmin } from './country-features';\nimport { GLOBE_RADIUS } from './three-globe';\nimport UiOverlay from './ui-overlay';\nimport './app.scss';\nimport { getCovidData } from './data-sources';\nimport { generateLinesFromFeatureCollection, generateLinesFromFeatureGeometry } from './geojson-utility';\n\nconst simulatedDaysPerRealtimeSecond = 4;\nconst msPerTimeUnit = 24 * 60 * 60 * 1000;\n\nfunction App() {\n  const rootElement = useRef<HTMLDivElement>(null);\n  const [scene, setScene] = useState<THREE.Scene>();\n  const [globe, setGlobe] = useState<ThreeGlobe>();\n  const [renderer, setRenderer] = useState<THREE.WebGLRenderer>();\n  const [camera, setCamera] = useState<THREE.PerspectiveCamera>();\n  const [admin0GeoJson, setAdmin0GeoJson] = useState<geojson.FeatureCollection>();\n  const [admin1GeoJson, setAdmin1GeoJson] = useState<geojson.FeatureCollection>();\n  const [dataSource, setDataSource] = useState<string>('none');\n  const [statsConfirmed, setStatsConfirmed] = useState<CovidStatistics>();\n  const [statsRecovered, setStatsRecovered] = useState<CovidStatistics>();\n  const [statsDeaths, setStatsDeaths] = useState<CovidStatistics>();\n  const [countryDensities, setCountryDensities] = useState<CountryDensities[]>();\n  const [selectedRegion, setSelectedRegion] = useState<string>();\n  const [paused, setPaused] = useState<boolean>(true);\n  const [admin0Lines, setAdmin0Lines] = useState<THREE.LineSegments>();\n  const [admin1Lines, setAdmin1Lines] = useState<THREE.LineSegments>();\n  const [globals] = useState<GlobalsType>({\n    dispatcher: d3.dispatch('timeChanged'),\n    _time: 0,\n    _paused: true,\n    _intervalId: undefined,\n    extinction: Number.POSITIVE_INFINITY,\n    useRecoveryData: true,\n    keepDeaths: false,\n    get time() {\n      return this._time;\n    },\n    set time(value) {\n      if (this._time === value) return;\n\n      this._time = value;\n      this.dispatcher.call('timeChanged', null, this._time, this.date);\n    },\n    get date(): Date | undefined {\n      const { startDate } = this;\n\n      if (startDate === undefined) return undefined;\n\n      return new Date(startDate.valueOf() + this.time * msPerTimeUnit);\n    },\n    set date(date: Date | undefined) {\n      const { startDate } = this;\n\n      if (startDate === undefined || date === undefined) return;\n\n      this.time = (date.valueOf() - startDate.valueOf()) / msPerTimeUnit;\n    },\n    get paused() {\n      return this._paused;\n    },\n    set paused(value) {\n      if (value === this.paused) return;\n\n      this._paused = value;\n\n      if (this._intervalId !== undefined) {\n        clearInterval(this._intervalId);\n        this._intervalId = undefined;\n      }\n\n      if (!this.paused) {\n        let lastTime: number | undefined = undefined;\n\n        this._intervalId = setInterval(() => {\n          const date = Date.now();\n\n          const secondsElapsed = (date - (lastTime ?? date)) / 1000;\n\n          lastTime = date;\n\n          globals.time += secondsElapsed * simulatedDaysPerRealtimeSecond;\n        }, 1000 / 60);\n      }\n    },\n  } as any);\n\n  useEffect(() => {\n    const element = rootElement.current;\n\n    if (!element) return;\n\n    const obj = initScene(element);\n\n    setGlobe(obj.globe);\n    setScene(obj.scene);\n    setRenderer(obj.renderer);\n    setCamera(obj.camera);\n  }, []);\n\n  useEffect(() => {\n    if (!admin0GeoJson || !admin1GeoJson || !admin0Lines || !camera || !globe || !renderer) return;\n\n    const onClick = (latlng?: { lat: number; lng: number }) => {\n      if (!latlng) return setSelectedRegion(undefined);\n\n      const geopt: [number, number] = [latlng.lng, latlng.lat];\n\n      const source = admin0Lines.visible ? admin0GeoJson : admin1GeoJson;\n\n      const feature = source.features?.find?.((f) => {\n        return d3.geoContains(f.geometry, geopt);\n      });\n\n      const [countryName, stateName] = getFeatureAdmin(feature);\n\n      setSelectedRegion(stateName ?? countryName);\n    };\n\n    createLatLngClickHandler({ camera, globe, renderer, onClick });\n  }, [admin0GeoJson, admin1GeoJson, admin0Lines, renderer, camera, globe]);\n\n  useEffect(() => {\n    if (!scene) return;\n\n    if (globals.selectedRegionLines) {\n      scene?.remove(globals.selectedRegionLines);\n      globals.selectedRegionLines = undefined;\n    }\n\n    if (!admin0GeoJson || !admin1GeoJson || !selectedRegion) return;\n\n    const material = new THREE.LineBasicMaterial({ color: 'white' });\n\n    for (const country of [...admin0GeoJson.features, ...admin1GeoJson.features]) {\n      if (getFeatureAdmin(country).indexOf(selectedRegion) < 0) continue;\n\n      globals.selectedRegionLines = generateLinesFromFeatureGeometry(country.geometry, material);\n\n      scene.add(globals.selectedRegionLines);\n\n      break;\n    }\n  }, [admin0GeoJson, admin1GeoJson, selectedRegion, scene, globals]);\n\n  useEffect(() => {\n    getCountryDensities().then(setCountryDensities);\n  }, []);\n\n  useEffect(() => {\n    getAdmin0Features().then(setAdmin0GeoJson);\n  }, []);\n\n  useEffect(() => {\n    getAdmin1Features().then(setAdmin1GeoJson);\n  }, []);\n\n  useEffect(() => {\n    if (!scene || !admin0GeoJson) return;\n\n    const material = new THREE.LineBasicMaterial({ color: 'red' });\n    const lines = generateLinesFromFeatureCollection(admin0GeoJson, material);\n\n    scene.add(lines);\n    setAdmin0Lines(lines);\n  }, [scene, admin0GeoJson]);\n\n  useEffect(() => {\n    if (!scene || !admin1GeoJson) return;\n\n    const material = new THREE.LineBasicMaterial({ color: 'red' });\n    const lines = generateLinesFromFeatureCollection(admin1GeoJson, material);\n\n    scene.add(lines);\n    setAdmin1Lines(lines);\n  }, [scene, admin1GeoJson]);\n\n  useEffect(() => {\n    if (!scene || !admin0Lines || !admin1Lines || !camera) return;\n\n    scene.onBeforeRender = () => {\n      admin1Lines.visible = (camera.position.length() ?? 0) < 200;\n      admin0Lines.visible = !admin1Lines.visible;\n    };\n  }, [scene, admin0Lines, admin1Lines, camera]);\n\n  useEffect(() => {\n    if (!admin0GeoJson) return;\n\n    getCovidData(dataSource, admin0GeoJson, globals, { setStatsConfirmed, setStatsRecovered, setStatsDeaths });\n  }, [globals, admin0GeoJson, dataSource]);\n\n  useEffect(() => {\n    const element = rootElement.current;\n\n    if (!element || !statsConfirmed || !statsDeaths || !globals) return;\n\n    generateChart({ element, globals, statsConfirmed, statsDeaths, selectedRegion });\n  }, [statsConfirmed, statsDeaths, globals, selectedRegion]);\n\n  useEffect(() => {\n    if (!countryDensities || !scene || !admin0GeoJson || !admin1GeoJson || !statsConfirmed || !statsRecovered || !statsDeaths) return;\n\n    const geoJsons = { ...admin0GeoJson, features: [...admin0GeoJson.features, ...admin1GeoJson.features] };\n    const mesh = generateDatapoints(countryDensities, geoJsons, globals, statsConfirmed, statsRecovered, statsDeaths);\n\n    scene.add(mesh);\n\n    setPaused(false);\n  }, [scene, countryDensities, admin0GeoJson, admin1GeoJson, globals, statsConfirmed, statsRecovered, statsDeaths]);\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n          primary: {\n            main: '#648dae',\n          },\n        },\n      }),\n    []\n  );\n\n  globals.paused = paused;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\" ref={rootElement}></div>\n      <UiOverlay\n        paused={paused}\n        setPaused={(paused: boolean) => {\n          setPaused(paused);\n        }}\n        dataSource={dataSource}\n        setDataSource={setDataSource}\n        globals={globals}\n      />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","export default \"uniform float time;\\nuniform bool use_recovery_data;\\nattribute float confirmed_time;\\nvarying float var_confirmed_time;\\nattribute float recovered_time;\\nvarying float var_recovered_time;\\nattribute float dead_time;\\nvarying float var_dead_time;\\nvarying float circle_blend_factor;\\n\\nconst float minsize = 1.;\\nconst float maxsize = 7.;\\nconst float dead_maxsize = 14.;\\nconst float big_value = 1e30;\\n\\nvoid main() {\\n  var_confirmed_time = confirmed_time;\\n  var_recovered_time = use_recovery_data ? recovered_time : big_value;\\n  var_dead_time = dead_time;\\n\\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n  float x = time - confirmed_time;\\n  float y = time - dead_time;\\n\\n  if (x < 0.)\\n    x = 0.;\\n  else\\n    x = mix(minsize, maxsize, exp(-x));\\n\\n  if (y >= 0.)\\n    x = mix(minsize, dead_maxsize, exp(-y));\\n\\n  circle_blend_factor = min(max(0., x - 1.), 1.);\\n\\n  gl_PointSize = x;\\n  gl_Position = projectionMatrix * mvPosition;\\n}\\n\";","export default \"uniform float time;\\nuniform float extinction_time;\\nuniform bool keep_deaths;\\nvarying float var_confirmed_time;\\nvarying float var_recovered_time;\\nvarying float var_dead_time;\\nvarying float circle_blend_factor;\\n\\nconst vec3 confirmed_color = vec3(0., 0., 1.);\\nconst vec3 recovered_color = vec3(0., .25, 0.);\\nconst vec3 dead_color = vec3(1., 0., 0.);\\n\\nconst float big_value = 1e30;\\n\\nvoid main() {\\n  float x = time - var_confirmed_time;\\n  float y = x;\\n\\n  if (x < 0.)\\n    x = 0.;\\n  else\\n    x = 1.;\\n  if (y < 0.)\\n    y = 0.;\\n  else\\n    y = exp(-y * 10.);\\n\\n  float blend = max(0., 1. - length(gl_PointCoord.st * 2. - 1.));\\n  float blur = .01;\\n\\n  blend = smoothstep(.5 - blur, .5 + blur, blend);\\n  blend = mix(1., blend, circle_blend_factor);\\n\\n  float extinct_time = var_confirmed_time + extinction_time;\\n\\n  if (keep_deaths && var_dead_time < big_value) {\\n    extinct_time = big_value;\\n  }\\n\\n  float z = time - extinct_time;\\n\\n  if (z >= 0.)\\n    blend = mix(0., blend, exp(-z));\\n\\n  vec3 color = confirmed_color * x;\\n\\n  color = mix(color, recovered_color,\\n              max(0., min(1., time - var_recovered_time - 1.)));\\n\\n  if (time - var_dead_time >= 0.)\\n    color = dead_color;\\n\\n  color += vec3(1e-2);\\n\\n  gl_FragColor = vec4(color, blend * x);\\n}\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}